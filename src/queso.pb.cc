// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "queso.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace queso {

namespace {

const ::google::protobuf::Descriptor* Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Variable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instructions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instructions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VarType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Opcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_queso_2eproto() {
  protobuf_AddDesc_queso_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "queso.proto");
  GOOGLE_CHECK(file != NULL);
  Variable_descriptor_ = file->message_type(0);
  static const int Variable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, lval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, count_),
  };
  Variable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Variable_descriptor_,
      Variable::default_instance_,
      Variable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Variable));
  Instruction_descriptor_ = file->message_type(1);
  static const int Instruction_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, lhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, rhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, srcmem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, dstmem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, trace_address_),
  };
  Instruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instruction_descriptor_,
      Instruction::default_instance_,
      Instruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instruction));
  Instructions_descriptor_ = file->message_type(2);
  static const int Instructions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instructions, instruction_),
  };
  Instructions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instructions_descriptor_,
      Instructions::default_instance_,
      Instructions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instructions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instructions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instructions));
  VarType_descriptor_ = file->enum_type(0);
  Opcode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_queso_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Variable_descriptor_, &Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instruction_descriptor_, &Instruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instructions_descriptor_, &Instructions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_queso_2eproto() {
  delete Variable::default_instance_;
  delete Variable_reflection_;
  delete Instruction::default_instance_;
  delete Instruction_reflection_;
  delete Instructions::default_instance_;
  delete Instructions_reflection_;
}

void protobuf_AddDesc_queso_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013queso.proto\022\005queso\"t\n\010Variable\022\034\n\004type"
    "\030\001 \002(\0162\016.queso.VarType\022\014\n\004name\030\002 \001(\t\022\014\n\004"
    "bits\030\003 \002(\005\022\021\n\taddresses\030\004 \001(\r\022\014\n\004lval\030\005 "
    "\001(\004\022\r\n\005count\030\006 \002(\r\"\312\003\n\013Instruction\022\035\n\006op"
    "code\030\001 \002(\0162\r.queso.Opcode\022\034\n\003dst\030\002 \001(\0132\017"
    ".queso.Variable\022\034\n\003lhs\030\003 \001(\0132\017.queso.Var"
    "iable\022\034\n\003rhs\030\004 \001(\0132\017.queso.Variable\022\034\n\003s"
    "rc\030\005 \001(\0132\017.queso.Variable\022\"\n\tcondition\030\006"
    " \001(\0132\017.queso.Variable\022\032\n\001t\030\007 \001(\0132\017.queso"
    ".Variable\022\032\n\001e\030\010 \001(\0132\017.queso.Variable\022 \n"
    "\007address\030\t \001(\0132\017.queso.Variable\022\034\n\003mem\030\n"
    " \001(\0132\017.queso.Variable\022\037\n\006srcmem\030\013 \001(\0132\017."
    "queso.Variable\022\037\n\006dstmem\030\014 \001(\0132\017.queso.V"
    "ariable\022\036\n\005value\030\r \001(\0132\017.queso.Variable\022"
    "\017\n\007comment\030\016 \001(\t\022\025\n\rtrace_address\030\017 \001(\004\""
    "7\n\014Instructions\022\'\n\013instruction\030\001 \003(\0132\022.q"
    "ueso.Instruction*0\n\007VarType\022\014\n\010VARIABLE\020"
    "\001\022\014\n\010CONSTANT\020\002\022\t\n\005ARRAY\020\003*\345\001\n\006Opcode\022\013\n"
    "\007COMMENT\020\000\022\n\n\006ASSIGN\020\001\022\t\n\005STORE\020\002\022\010\n\004LOA"
    "D\020\003\022\007\n\003ITE\020\004\022\016\n\nSIGNEXTEND\020\005\022\007\n\003ADD\020\006\022\007\n"
    "\003SUB\020\007\022\007\n\003MUL\020\010\022\010\n\004UDIV\020\t\022\010\n\004UMOD\020\n\022\007\n\003A"
    "ND\020\013\022\006\n\002OR\020\014\022\007\n\003XOR\020\r\022\007\n\003SHR\020\016\022\007\n\003SHL\020\017\022"
    "\t\n\005CMPEQ\020\020\022\n\n\006CMPLTU\020\021\022\n\n\006CMPLEU\020\022\022\n\n\006CM"
    "PLTS\020\023\022\n\n\006CMPLES\020\024", 938);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "queso.proto", &protobuf_RegisterTypes);
  Variable::default_instance_ = new Variable();
  Instruction::default_instance_ = new Instruction();
  Instructions::default_instance_ = new Instructions();
  Variable::default_instance_->InitAsDefaultInstance();
  Instruction::default_instance_->InitAsDefaultInstance();
  Instructions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_queso_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_queso_2eproto {
  StaticDescriptorInitializer_queso_2eproto() {
    protobuf_AddDesc_queso_2eproto();
  }
} static_descriptor_initializer_queso_2eproto_;

const ::google::protobuf::EnumDescriptor* VarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarType_descriptor_;
}
bool VarType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Opcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Opcode_descriptor_;
}
bool Opcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Variable::kTypeFieldNumber;
const int Variable::kNameFieldNumber;
const int Variable::kBitsFieldNumber;
const int Variable::kAddressesFieldNumber;
const int Variable::kLvalFieldNumber;
const int Variable::kCountFieldNumber;
#endif  // !_MSC_VER

Variable::Variable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Variable::InitAsDefaultInstance() {
}

Variable::Variable(const Variable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Variable::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bits_ = 0;
  addresses_ = 0u;
  lval_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Variable::~Variable() {
  SharedDtor();
}

void Variable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variable_descriptor_;
}

const Variable& Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_queso_2eproto();  return *default_instance_;
}

Variable* Variable::default_instance_ = NULL;

Variable* Variable::New() const {
  return new Variable;
}

void Variable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    bits_ = 0;
    addresses_ = 0u;
    lval_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .queso.VarType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (queso::VarType_IsValid(value)) {
            set_type(static_cast< queso::VarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bits;
        break;
      }
      
      // required int32 bits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addresses;
        break;
      }
      
      // optional uint32 addresses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addresses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addresses_)));
          set_has_addresses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lval;
        break;
      }
      
      // optional uint64 lval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lval_)));
          set_has_lval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }
      
      // required uint32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .queso.VarType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 bits = 3;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bits(), output);
  }
  
  // optional uint32 addresses = 4;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->addresses(), output);
  }
  
  // optional uint64 lval = 5;
  if (has_lval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lval(), output);
  }
  
  // required uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Variable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .queso.VarType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 bits = 3;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bits(), target);
  }
  
  // optional uint32 addresses = 4;
  if (has_addresses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->addresses(), target);
  }
  
  // optional uint64 lval = 5;
  if (has_lval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lval(), target);
  }
  
  // required uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Variable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .queso.VarType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 bits = 3;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits());
    }
    
    // optional uint32 addresses = 4;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addresses());
    }
    
    // optional uint64 lval = 5;
    if (has_lval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lval());
    }
    
    // required uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Variable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Variable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_addresses()) {
      set_addresses(from.addresses());
    }
    if (from.has_lval()) {
      set_lval(from.lval());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Variable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000025) != 0x00000025) return false;
  
  return true;
}

void Variable::Swap(Variable* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(bits_, other->bits_);
    std::swap(addresses_, other->addresses_);
    std::swap(lval_, other->lval_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Variable_descriptor_;
  metadata.reflection = Variable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instruction::kOpcodeFieldNumber;
const int Instruction::kDstFieldNumber;
const int Instruction::kLhsFieldNumber;
const int Instruction::kRhsFieldNumber;
const int Instruction::kSrcFieldNumber;
const int Instruction::kConditionFieldNumber;
const int Instruction::kTFieldNumber;
const int Instruction::kEFieldNumber;
const int Instruction::kAddressFieldNumber;
const int Instruction::kMemFieldNumber;
const int Instruction::kSrcmemFieldNumber;
const int Instruction::kDstmemFieldNumber;
const int Instruction::kValueFieldNumber;
const int Instruction::kCommentFieldNumber;
const int Instruction::kTraceAddressFieldNumber;
#endif  // !_MSC_VER

Instruction::Instruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instruction::InitAsDefaultInstance() {
  dst_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  lhs_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  rhs_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  src_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  condition_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  t_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  e_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  address_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  mem_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  srcmem_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  dstmem_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
  value_ = const_cast< ::queso::Variable*>(&::queso::Variable::default_instance());
}

Instruction::Instruction(const Instruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instruction::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  dst_ = NULL;
  lhs_ = NULL;
  rhs_ = NULL;
  src_ = NULL;
  condition_ = NULL;
  t_ = NULL;
  e_ = NULL;
  address_ = NULL;
  mem_ = NULL;
  srcmem_ = NULL;
  dstmem_ = NULL;
  value_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trace_address_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instruction::~Instruction() {
  SharedDtor();
}

void Instruction::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
    delete dst_;
    delete lhs_;
    delete rhs_;
    delete src_;
    delete condition_;
    delete t_;
    delete e_;
    delete address_;
    delete mem_;
    delete srcmem_;
    delete dstmem_;
    delete value_;
  }
}

void Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instruction_descriptor_;
}

const Instruction& Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_queso_2eproto();  return *default_instance_;
}

Instruction* Instruction::default_instance_ = NULL;

Instruction* Instruction::New() const {
  return new Instruction;
}

void Instruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_dst()) {
      if (dst_ != NULL) dst_->::queso::Variable::Clear();
    }
    if (has_lhs()) {
      if (lhs_ != NULL) lhs_->::queso::Variable::Clear();
    }
    if (has_rhs()) {
      if (rhs_ != NULL) rhs_->::queso::Variable::Clear();
    }
    if (has_src()) {
      if (src_ != NULL) src_->::queso::Variable::Clear();
    }
    if (has_condition()) {
      if (condition_ != NULL) condition_->::queso::Variable::Clear();
    }
    if (has_t()) {
      if (t_ != NULL) t_->::queso::Variable::Clear();
    }
    if (has_e()) {
      if (e_ != NULL) e_->::queso::Variable::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_address()) {
      if (address_ != NULL) address_->::queso::Variable::Clear();
    }
    if (has_mem()) {
      if (mem_ != NULL) mem_->::queso::Variable::Clear();
    }
    if (has_srcmem()) {
      if (srcmem_ != NULL) srcmem_->::queso::Variable::Clear();
    }
    if (has_dstmem()) {
      if (dstmem_ != NULL) dstmem_->::queso::Variable::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::queso::Variable::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    trace_address_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .queso.Opcode opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (queso::Opcode_IsValid(value)) {
            set_opcode(static_cast< queso::Opcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }
      
      // optional .queso.Variable dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lhs;
        break;
      }
      
      // optional .queso.Variable lhs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lhs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lhs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rhs;
        break;
      }
      
      // optional .queso.Variable rhs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rhs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src;
        break;
      }
      
      // optional .queso.Variable src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_condition;
        break;
      }
      
      // optional .queso.Variable condition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_t;
        break;
      }
      
      // optional .queso.Variable t = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_e;
        break;
      }
      
      // optional .queso.Variable e = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_address;
        break;
      }
      
      // optional .queso.Variable address = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mem;
        break;
      }
      
      // optional .queso.Variable mem = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_srcmem;
        break;
      }
      
      // optional .queso.Variable srcmem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcmem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srcmem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dstmem;
        break;
      }
      
      // optional .queso.Variable dstmem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstmem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dstmem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_value;
        break;
      }
      
      // optional .queso.Variable value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_comment;
        break;
      }
      
      // optional string comment = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_trace_address;
        break;
      }
      
      // optional uint64 trace_address = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_address_)));
          set_has_trace_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .queso.Opcode opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opcode(), output);
  }
  
  // optional .queso.Variable dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst(), output);
  }
  
  // optional .queso.Variable lhs = 3;
  if (has_lhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lhs(), output);
  }
  
  // optional .queso.Variable rhs = 4;
  if (has_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rhs(), output);
  }
  
  // optional .queso.Variable src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->src(), output);
  }
  
  // optional .queso.Variable condition = 6;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->condition(), output);
  }
  
  // optional .queso.Variable t = 7;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->t(), output);
  }
  
  // optional .queso.Variable e = 8;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->e(), output);
  }
  
  // optional .queso.Variable address = 9;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->address(), output);
  }
  
  // optional .queso.Variable mem = 10;
  if (has_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mem(), output);
  }
  
  // optional .queso.Variable srcmem = 11;
  if (has_srcmem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->srcmem(), output);
  }
  
  // optional .queso.Variable dstmem = 12;
  if (has_dstmem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dstmem(), output);
  }
  
  // optional .queso.Variable value = 13;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->value(), output);
  }
  
  // optional string comment = 14;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->comment(), output);
  }
  
  // optional uint64 trace_address = 15;
  if (has_trace_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->trace_address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .queso.Opcode opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opcode(), target);
  }
  
  // optional .queso.Variable dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst(), target);
  }
  
  // optional .queso.Variable lhs = 3;
  if (has_lhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lhs(), target);
  }
  
  // optional .queso.Variable rhs = 4;
  if (has_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rhs(), target);
  }
  
  // optional .queso.Variable src = 5;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->src(), target);
  }
  
  // optional .queso.Variable condition = 6;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->condition(), target);
  }
  
  // optional .queso.Variable t = 7;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->t(), target);
  }
  
  // optional .queso.Variable e = 8;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->e(), target);
  }
  
  // optional .queso.Variable address = 9;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->address(), target);
  }
  
  // optional .queso.Variable mem = 10;
  if (has_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mem(), target);
  }
  
  // optional .queso.Variable srcmem = 11;
  if (has_srcmem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->srcmem(), target);
  }
  
  // optional .queso.Variable dstmem = 12;
  if (has_dstmem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dstmem(), target);
  }
  
  // optional .queso.Variable value = 13;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->value(), target);
  }
  
  // optional string comment = 14;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->comment(), target);
  }
  
  // optional uint64 trace_address = 15;
  if (has_trace_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->trace_address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .queso.Opcode opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }
    
    // optional .queso.Variable dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }
    
    // optional .queso.Variable lhs = 3;
    if (has_lhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lhs());
    }
    
    // optional .queso.Variable rhs = 4;
    if (has_rhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rhs());
    }
    
    // optional .queso.Variable src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }
    
    // optional .queso.Variable condition = 6;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }
    
    // optional .queso.Variable t = 7;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t());
    }
    
    // optional .queso.Variable e = 8;
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->e());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .queso.Variable address = 9;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }
    
    // optional .queso.Variable mem = 10;
    if (has_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem());
    }
    
    // optional .queso.Variable srcmem = 11;
    if (has_srcmem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->srcmem());
    }
    
    // optional .queso.Variable dstmem = 12;
    if (has_dstmem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dstmem());
    }
    
    // optional .queso.Variable value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
    // optional string comment = 14;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional uint64 trace_address = 15;
    if (has_trace_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instruction::MergeFrom(const Instruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_dst()) {
      mutable_dst()->::queso::Variable::MergeFrom(from.dst());
    }
    if (from.has_lhs()) {
      mutable_lhs()->::queso::Variable::MergeFrom(from.lhs());
    }
    if (from.has_rhs()) {
      mutable_rhs()->::queso::Variable::MergeFrom(from.rhs());
    }
    if (from.has_src()) {
      mutable_src()->::queso::Variable::MergeFrom(from.src());
    }
    if (from.has_condition()) {
      mutable_condition()->::queso::Variable::MergeFrom(from.condition());
    }
    if (from.has_t()) {
      mutable_t()->::queso::Variable::MergeFrom(from.t());
    }
    if (from.has_e()) {
      mutable_e()->::queso::Variable::MergeFrom(from.e());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_address()) {
      mutable_address()->::queso::Variable::MergeFrom(from.address());
    }
    if (from.has_mem()) {
      mutable_mem()->::queso::Variable::MergeFrom(from.mem());
    }
    if (from.has_srcmem()) {
      mutable_srcmem()->::queso::Variable::MergeFrom(from.srcmem());
    }
    if (from.has_dstmem()) {
      mutable_dstmem()->::queso::Variable::MergeFrom(from.dstmem());
    }
    if (from.has_value()) {
      mutable_value()->::queso::Variable::MergeFrom(from.value());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_trace_address()) {
      set_trace_address(from.trace_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instruction::CopyFrom(const Instruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  if (has_lhs()) {
    if (!this->lhs().IsInitialized()) return false;
  }
  if (has_rhs()) {
    if (!this->rhs().IsInitialized()) return false;
  }
  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_t()) {
    if (!this->t().IsInitialized()) return false;
  }
  if (has_e()) {
    if (!this->e().IsInitialized()) return false;
  }
  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  if (has_mem()) {
    if (!this->mem().IsInitialized()) return false;
  }
  if (has_srcmem()) {
    if (!this->srcmem().IsInitialized()) return false;
  }
  if (has_dstmem()) {
    if (!this->dstmem().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Instruction::Swap(Instruction* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(dst_, other->dst_);
    std::swap(lhs_, other->lhs_);
    std::swap(rhs_, other->rhs_);
    std::swap(src_, other->src_);
    std::swap(condition_, other->condition_);
    std::swap(t_, other->t_);
    std::swap(e_, other->e_);
    std::swap(address_, other->address_);
    std::swap(mem_, other->mem_);
    std::swap(srcmem_, other->srcmem_);
    std::swap(dstmem_, other->dstmem_);
    std::swap(value_, other->value_);
    std::swap(comment_, other->comment_);
    std::swap(trace_address_, other->trace_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instruction_descriptor_;
  metadata.reflection = Instruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instructions::kInstructionFieldNumber;
#endif  // !_MSC_VER

Instructions::Instructions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instructions::InitAsDefaultInstance() {
}

Instructions::Instructions(const Instructions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instructions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instructions::~Instructions() {
  SharedDtor();
}

void Instructions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Instructions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instructions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instructions_descriptor_;
}

const Instructions& Instructions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_queso_2eproto();  return *default_instance_;
}

Instructions* Instructions::default_instance_ = NULL;

Instructions* Instructions::New() const {
  return new Instructions;
}

void Instructions::Clear() {
  instruction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instructions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .queso.Instruction instruction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instruction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instruction;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instructions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .queso.Instruction instruction = 1;
  for (int i = 0; i < this->instruction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instruction(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instructions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .queso.Instruction instruction = 1;
  for (int i = 0; i < this->instruction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instruction(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instructions::ByteSize() const {
  int total_size = 0;
  
  // repeated .queso.Instruction instruction = 1;
  total_size += 1 * this->instruction_size();
  for (int i = 0; i < this->instruction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instruction(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instructions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instructions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instructions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instructions::MergeFrom(const Instructions& from) {
  GOOGLE_CHECK_NE(&from, this);
  instruction_.MergeFrom(from.instruction_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instructions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instructions::CopyFrom(const Instructions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instructions::IsInitialized() const {
  
  for (int i = 0; i < instruction_size(); i++) {
    if (!this->instruction(i).IsInitialized()) return false;
  }
  return true;
}

void Instructions::Swap(Instructions* other) {
  if (other != this) {
    instruction_.Swap(&other->instruction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instructions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instructions_descriptor_;
  metadata.reflection = Instructions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace queso

// @@protoc_insertion_point(global_scope)
